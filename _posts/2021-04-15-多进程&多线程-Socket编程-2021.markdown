---
layout:     post
title:      "多进程、多线程、Socket编程, 2021"
subtitle:   "文档提交测试"
date:       2021-04-15 14:01:00
author:     "Ruer"
header-img: "img/bg/hello_world.jpg"
catalog: true
tags:
    - 测试说明
---

# 一、多进程
## 1.Linux
### （1）fork示例代码
![节点](./图片/fork示例代码.png) 
### （2）exec示例代码
![节点](./图片/exec函数示例.png) 
### （3）system示例代码
![节点](./图片/system函数示例.png) 
### （4）进程间通信
管道、命名管道、消息队列、信号、信号量、共享内存、套接字。
### （5）msgkit原理 
* 在资源受限的Linux系统下实现轻量、高效、调试便捷的进程间通信机制，并取名为msgkit。
* 实现原理：共享内存 + mmap + ioctl方式
![节点](./图片/msgkit内存映射图.png) 
## 2.Windows
### （1）进程间通信
* Clipboard(剪贴板)
* COM(组件对象模型)
* Data Copy(数据复制)
* DDE(动态数据交换)
* File Mapping (文件映射)
* MailSlot(邮件槽)
* Pipe(管道)
* RPC(远程过程调用)
* WinSocket(Windows套接字)
### （2）创建进程
![节点](./图片/创建进程示例代码.png) 
# 二、多线程
## 1.Linux
### （1）多线程示例代码
![节点](./图片/多线程示例代码.png) 
### （2）线程同步
* 互斥锁
* 自旋锁
* 信号量
* 读写锁
* 条件变量
## 2.Windows
### （1）多线程示例代码
![节点](./图片/多线程例子.png) 
### （2）线程同步
* 事件(Event)
* 信号量(semaphore)
* 互斥量(mutex)
* 临界区(Critical section)
# 三、socket编程
## 1.Linux
### （1）创建socket
![节点](./图片/创建socket.png) 
### （2）监听socket
![节点](./图片/监听socket.png) 
## 2.Windows
### （1）socket连接
![节点](./图片/socket连接.png) 
### （2）socket监听
![节点](./图片/socket监听.png)